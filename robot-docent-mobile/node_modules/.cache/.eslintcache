[{"/home/memo/catkin_ws/src/Robotic-Docent/robot-docent-mobile/src/index.js":"1","/home/memo/catkin_ws/src/Robotic-Docent/robot-docent-mobile/src/App.js":"2","/home/memo/catkin_ws/src/Robotic-Docent/robot-docent-mobile/src/reportWebVitals.js":"3","/home/memo/catkin_ws/src/Robotic-Docent/robot-docent-mobile/src/questionare.js":"4"},{"size":454,"mtime":1615829341620,"results":"5","hashOfConfig":"6"},{"size":310,"mtime":1615829466290,"results":"7","hashOfConfig":"6"},{"size":385,"mtime":1615829491720,"results":"8","hashOfConfig":"6"},{"size":7552,"mtime":1619728183030,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1yu2h5a",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"18"},"/home/memo/catkin_ws/src/Robotic-Docent/robot-docent-mobile/src/index.js",[],"/home/memo/catkin_ws/src/Robotic-Docent/robot-docent-mobile/src/App.js",[],"/home/memo/catkin_ws/src/Robotic-Docent/robot-docent-mobile/src/reportWebVitals.js",[],"/home/memo/catkin_ws/src/Robotic-Docent/robot-docent-mobile/src/questionare.js",["19","20"],"import './App.css';\nimport axios from 'axios';\nimport React from 'react';\nimport _ from \"lodash\";\nimport styled from 'styled-components';\n\nconst robot_url = \"http://localhost:5000/\";\n\n//styles the button ui elements to look nice\nconst Button = styled.button` \n  background-color: #55AD74;\n  color: white;\n  font-size: 20px;\n  padding: 10px 90px;\n  border-radius: 5px;\n  margin: 10px 0px;\n  cursor: pointer;\n`;\n\nconst MButton = styled.button` \n  background-color: royalblue;\n  color: white;\n  font-size: 20px;\n  padding: 10px 20px;\n  border-radius: 5px;\n  margin: 10px 0px;\n  cursor: pointer;\n`;\n\nconst QButton = styled.button` \n  background-color: #1E5D88;\n  color: white;\n  font-size: 20px;\n  width: 240px;\n  min-height: 50px;\n  border-radius: 5px;\n  margin: 10px 0px;\n  padding: 15px 15px;\n  cursor: pointer;\n`;\n\n//Button that controls the dispay of the current questions/answer for the tour\nconst QuestionPingButton = function(props){\n    const {text, onClick, displayFlag} = props;\n    return(\n        <div>\n          {displayFlag &&\n            <Button onClick={onClick}>{text}</Button>\n          }\n        </div>\n    );\n}\n\n//behavior for question buttons\n//on click, textbox pops up with answet text\nconst Row = function(props){\n    const {question, answer, onClick, showAnswerFlag} = props;\n    return (\n      <div>\n        <QButton onClick={onClick}>{question}</QButton>\n        <br></br>\n        {showAnswerFlag && (\n            <box>{answer}</box>\n        )}\n      </div>\n    );\n  }\n\nconst MRow = function(props){\n    const {question, answer, onClick, showAnswerFlag} = props;\n    return (\n      <div>\n        <MButton onClick={onClick}>{question}</MButton>\n        <br></br>\n        {showAnswerFlag && (\n            <mbox>{answer}</mbox>\n        )}\n      </div>\n    );\n  }\n  \nexport default class QAGenerator extends React.Component {\n    constructor(props){\n      super(props);\n      this.state = {\n        qbutton: [\n            {showQuestionsFlag: false, qButtonText: '\"I Have A Question!\"', displayFlag: true}\n        ],\n        mapbutton: [\n          {question: 'Map', answer: null, showAnswerFlag: false}\n        ],\n        rows: [//default (bunk) questions\n          {question: '\"Sorry! No questions have been loaded', answer: '?', showAnswerFlag: false}\n        ],\n        oldQA: [], //flag for updating question boxes \n        oldMap: null\n      };\n\n    }\n    componentDidMount() {\n      this.refreshQA = setInterval( //pings robot every second\n        () => this.updateList(),\n        5000\n      );\n    }\n    componentWillUnmount() {\n      clearInterval(this.refreshQA); //stops pinging robot on death\n    }\n\n    //behavior for adding new question and answer boxes\n    addRow = (Q, A) => {\n      const rows = [...this.state.rows, \n                    {question: Q, answer: A, showAnswerFlag: false}\n                   ];\n      this.setState({\n          rows: rows\n      });\n    }\n    \n    //behavior to delete all QA boxes when updating list\n    clearRows = () => {\n      this.setState({\n        rows: []\n      });\n    }\n\n    updateList = async () => {\n      var newQA = await axios.get(robot_url + `/server/qa`). //robot server\n        catch( newQA => newQA);\n      const robot_not_found = newQA instanceof Error; //error only occurs when robot server not found\n      if(!robot_not_found && !_.isEqual(newQA.data, this.state.oldQA)){//checks that new QA data was pulled from robot server\n        var QAs = newQA.data;\n        this.clearRows(); //clear old data\n        QAs.QAList.forEach(QA => {\n          this.addRow(QA.question, QA.answer) //populate screen with new QA\n        });\n        this.setState({\n          oldQA: newQA.data\n        });\n      }\n    }\n    \n    //behavior for clicking on Question box\n    //should populatescreen with associated asnwer\n    //hides answer on second click\n    showAnswer = (idx) => {\n      const rows = [...this.state.rows];\n      rows[idx].showAnswerFlag = !rows[idx].showAnswerFlag;\n      const data = {Q: rows[idx].question, A: rows[idx].answer};\n      if(rows[idx].showAnswerFlag){\n        const text2speech = axios.post(robot_url + `/send_answer`, data);\n      }\n      \n      this.setState({\n          rows: rows\n      });\n    }\n    //behavior of the \"I Have A Question\" button\n    //on click, populates screen with questions and change text to \"Thank You!\"\n    //clicking \"Thank You!\" hides QA boxes and changes text back\n    showQuestions = () => {\n        const qbutton = [...this.state.qbutton];\n        const rows = [...this.state.rows];\n        qbutton[0].showQuestionsFlag = !qbutton[0].showQuestionsFlag;\n        if(!qbutton[0].showQuestionsFlag){\n            qbutton[0].qButtonText = '\"I Have A Question!\"';\n            rows.forEach(row => {\n                row.showAnswerFlag = false\n            });\n        }\n        else{\n            qbutton[0].qButtonText = '\"Thank You!\"';\n        } \n        this.setState({\n            qbutton: qbutton\n        });\n    }\n\n\n\n    displayMap = async () => {\n      const mapbutton = [...this.state.mapbutton];\n      /*var museum_map = await axios.get(`http://127.0.0.1:5001/server/qa`)\n        catch( museum_map => museum_map);*/\n      const robot_not_found = false//museum_map instanceof Error; //error only occurs when robot server not found\n      if(robot_not_found){\n        mapbutton[0].answer = React.createElement(\n          \"img\",\n          {\n            src: process.env.PUBLIC_URL + '/map_not_found',\n            width: \"303px\",\n            height: \"220px\"\n          });\n      }\n      else{\n        mapbutton[0].answer = React.createElement(\n          \"img\",\n          {\n            src: process.env.PUBLIC_URL + '/map.png',\n            width: \"303px\",\n            height: \"220px\"\n          });\n      }\n      mapbutton[0].showAnswerFlag = !mapbutton[0].showAnswerFlag;\n      this.setState({\n        //oldMap: museum_map,\n        mapbutton: mapbutton\n\n      });\n    }\n    \n    //handles real-time rendering of new QA\n    //handles proper placement of UI elements\n    render(){\n      return(\n        <div>\n          <br></br>\n          <br></br>\n          <br></br>\n          <br></br>\n            {this.state.qbutton.map((button) => {\n                return(\n                    <QuestionPingButton\n                            text={button.qButtonText}\n                            onClick={this.showQuestions}\n                            displayFlag={button.displayFlag}\n                    />\n                )\n                })\n            }\n          {this.state.rows.map((row, idx) => {\n            return(\n                <div>\n                    {this.state.qbutton[0].showQuestionsFlag && \n                        (<Row \n                        key={idx} \n                        question={row.question}\n                        answer={row.answer}\n                        onClick={() => this.showAnswer(idx)}\n                        showAnswerFlag={row.showAnswerFlag}\n                    />)} \n                </div>\n              )\n          })\n          }\n          <br></br>\n          <br></br>\n          <br></br>\n          {this.state.mapbutton.map((row, idx) => {\n            return(\n                <div>\n                    {(<MRow \n                        key={idx} \n                        question={row.question}\n                        answer={row.answer}\n                        onClick={() => this.displayMap(idx)}\n                        showAnswerFlag={row.showAnswerFlag}\n                    />)} \n                </div>\n                )\n              })\n            }\n        </div>\n      );\n    }\n  }\n",{"ruleId":"21","severity":1,"message":"22","line":128,"column":60,"nodeType":"23","messageId":"24","endLine":128,"endColumn":61,"fix":"25"},{"ruleId":"26","severity":1,"message":"27","line":151,"column":15,"nodeType":"28","messageId":"29","endLine":151,"endColumn":26},"dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"30","text":"31"},"no-unused-vars","'text2speech' is assigned a value but never used.","Identifier","unusedVar",[3133,3158]," //robot server\n        ."]