[{"/home/memo/catkin_ws/src/Robotic-Docent/robot-docent-mobile/src/index.js":"1","/home/memo/catkin_ws/src/Robotic-Docent/robot-docent-mobile/src/App.js":"2","/home/memo/catkin_ws/src/Robotic-Docent/robot-docent-mobile/src/questionare.js":"3","/home/memo/catkin_ws/src/Robotic-Docent/robot-docent-mobile/src/reportWebVitals.js":"4"},{"size":454,"mtime":1615829341620,"results":"5","hashOfConfig":"6"},{"size":310,"mtime":1615829466290,"results":"7","hashOfConfig":"6"},{"size":4949,"mtime":1615768081790,"results":"8","hashOfConfig":"6"},{"size":385,"mtime":1615829491720,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1fs6g81",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/memo/catkin_ws/src/Robotic-Docent/robot-docent-mobile/src/index.js",[],"/home/memo/catkin_ws/src/Robotic-Docent/robot-docent-mobile/src/App.js",[],"/home/memo/catkin_ws/src/Robotic-Docent/robot-docent-mobile/src/questionare.js",["19"],"import './App.css';\nimport axios from 'axios';\nimport React from 'react';\nimport _ from \"lodash\";\nimport styled from 'styled-components';\n/*\n\n*/\n\n//styles the button ui elements to look nice\nconst Button = styled.button` \n  background-color: black;\n  color: white;\n  font-size: 20px;\n  padding: 10px 60px;\n  border-radius: 5px;\n  margin: 10px 0px;\n  cursor: pointer;\n`;\n\n//Button that controls the dispay of the current questions/answer for the tour\nconst QuestionPingButton = function(props){\n    const {text, onClick} = props;\n    return(\n        <div>\n            <Button onClick={onClick}>{text}</Button>\n        </div>\n    );\n}\n\n//behavior for question buttons\n//on click, textbox pops up with answet text\nconst Row = function(props){\n    const {question, answer, onClick, showAnswerFlag} = props;\n    return (\n      <div>\n        <Button onClick={onClick}>{question}</Button>\n        {showAnswerFlag && (\n            <box>{answer}</box>\n        )}\n      </div>\n    );\n  }\n  \nexport default class QAGenerator extends React.Component {\n    constructor(props){\n      super(props);\n      this.state = {\n        qbutton: [\n            {showQuestionsFlag: false, qButtonText: '\"I Have A Question!\"'}\n        ],\n        rows: [//default (bunk) questions\n          {question: '\"Question 1\"', answer: 'Answer 1', showAnswerFlag: false},\n          {question: '\"Question 2\"', answer: 'Answer 2', showAnswerFlag: false},\n          {question: '\"Question 3\"', answer: 'Answer 3', showAnswerFlag: false}\n        ],\n        oldQA: [] //flag for updating question boxes \n      };\n\n    }\n    componentDidMount() {\n      this.refreshQA = setInterval( //pings robot every second\n        () => this.updateList(),\n        1000\n      );\n    }\n    componentWillUnmount() {\n      clearInterval(this.refreshQA); //stops pinging robot on death\n    }\n\n    //behavior for adding new question and answer boxes\n    addRow = (Q, A) => {\n      const rows = [...this.state.rows, \n                    {question: Q, answer: A, showAnswerFlag: false}\n                   ];\n      this.setState({\n          rows: rows\n      });\n    }\n    \n    //behavior to delete all QA boxes when updating list\n    clearRows = () => {\n      this.setState({\n        rows: []\n      });\n    }\n\n    updateList = async () => {\n      var newQA = await axios.get(`http://127.0.0.1:5001/server/qa`). //robot server\n        catch( newQA => newQA);\n      const robot_not_found = newQA instanceof Error; //error only occurs when robot server not found\n      if(!robot_not_found && !_.isEqual(newQA.data, this.state.oldQA)){//checks that new QA data was pulled from robot server\n        var QAs = newQA.data;\n        this.clearRows(); //clear old data\n        QAs.QAList.forEach(QA => {\n          this.addRow(QA.question, QA.answer) //populate screen with new QA\n        });\n        this.setState({\n          oldQA: newQA.data\n        });\n      }\n    }\n    \n    //behavior for clicking on Question box\n    //should populatescreen with associated asnwer\n    //hides answer on second click\n    showAnswer = (idx) => {\n      const rows = [...this.state.rows];\n      rows[idx].showAnswerFlag = !rows[idx].showAnswerFlag;\n      this.setState({\n          rows: rows\n      });\n    }\n    //behavior of the \"I Have A Question\" button\n    //on click, populates screen with questions and change text to \"Thank You!\"\n    //clicking \"Thank You!\" hides QA boxes and changes text back\n    showQuestions = () => {\n        const qbutton = [...this.state.qbutton];\n        const rows = [...this.state.rows];\n        qbutton[0].showQuestionsFlag = !qbutton[0].showQuestionsFlag;\n        if(!qbutton[0].showQuestionsFlag){\n            qbutton[0].qButtonText = '\"I Have A Question!\"';\n            rows.forEach(row => {\n                row.showAnswerFlag = false\n            });\n        }\n        else{\n            qbutton[0].qButtonText = '\"Thank You!\"';\n        } \n        this.setState({\n            qbutton: qbutton\n        });\n    }\n    \n    //handles real-time rendering of new QA\n    //handles proper placement of UI elements\n    render(){\n      return(\n        <div>\n            {this.state.qbutton.map((button) => {\n                return(\n                    <QuestionPingButton\n                            text={button.qButtonText}\n                            onClick={this.showQuestions}\n                    />\n                )\n                })\n            }\n          {this.state.rows.map((row, idx) => {\n            return(\n                <div>\n                    {this.state.qbutton[0].showQuestionsFlag && \n                        (<Row \n                        key={idx} \n                        question={row.question}\n                        answer={row.answer}\n                        onClick={() => this.showAnswer(idx)}\n                        showAnswerFlag={row.showAnswerFlag}\n                    />)} \n                </div>\n              )\n          })\n          }\n        </div>\n      );\n    }\n  }\n","/home/memo/catkin_ws/src/Robotic-Docent/robot-docent-mobile/src/reportWebVitals.js",[],{"ruleId":"20","severity":1,"message":"21","line":89,"column":69,"nodeType":"22","messageId":"23","endLine":89,"endColumn":70,"fix":"24"},"dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"25","text":"26"},[2342,2367]," //robot server\n        ."]