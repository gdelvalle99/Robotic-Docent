{"ast":null,"code":"var _jsxFileName = \"/home/memo/catkin_ws/src/Robotic-Docent/robot-docent-mobile/src/questionare.js\";\nimport './App.css';\nimport axios from 'axios';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst QuestionPingButton = function (props) {\n  const {\n    text,\n    onClick\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onClick,\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }, this);\n};\n\n_c = QuestionPingButton;\n\nconst Row = function (props) {\n  const {\n    question,\n    answer,\n    onClick,\n    showAnswerFlag\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onClick,\n      children: question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, this), showAnswerFlag && /*#__PURE__*/_jsxDEV(\"box\", {\n      children: answer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 7\n  }, this);\n};\n\n_c2 = Row;\nexport default class QAGenerator extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.addRow = (Q, A) => {\n      const rows = [...this.state.rows, {\n        question: Q,\n        answer: A,\n        showAnswerFlag: false\n      }];\n      this.setState({\n        rows: rows\n      });\n    };\n\n    this.clearRows = () => {\n      this.setState({\n        rows: []\n      });\n    };\n\n    this.updateList = async () => {\n      const newQA = await axios.get(`http://127.0.0.1:5000/server/qa`);\n\n      if (newQA != this.state.oldQA) {\n        const QAs = JSON.parse(newQA);\n        this.clearRows();\n        QAs.QAList.forEach(QA => {\n          this.addRow(QA.question, QA.answer);\n        });\n        this.setState({\n          oldQA: newQA\n        });\n      }\n    };\n\n    this.showAnswer = idx => {\n      const rows = [...this.state.rows];\n      rows[idx].showAnswerFlag = !rows[idx].showAnswerFlag;\n      this.setState({\n        rows: rows\n      });\n    };\n\n    this.showQuestions = () => {\n      const qbutton = [...this.state.qbutton];\n      const rows = [...this.state.rows];\n      qbutton[0].showQuestionsFlag = !qbutton[0].showQuestionsFlag;\n\n      if (!qbutton[0].showQuestionsFlag) {\n        qbutton[0].qButtonText = '\"I Have A Question!\"';\n        rows.forEach(row => {\n          row.showAnswerFlag = false;\n        });\n      } else {\n        qbutton[0].qButtonText = '\"Thank You!\"';\n      }\n\n      this.setState({\n        qbutton: qbutton\n      });\n    };\n\n    this.state = {\n      qbutton: [{\n        showQuestionsFlag: false,\n        qButtonText: '\"I Have A Question!\"'\n      }],\n      rows: [{\n        question: '\"Question 1\"',\n        answer: 'Answer 1',\n        showAnswerFlag: false\n      }, {\n        question: '\"Question 2\"',\n        answer: 'Answer 2',\n        showAnswerFlag: false\n      }, {\n        question: '\"Question 3\"',\n        answer: 'Answer 3',\n        showAnswerFlag: false\n      }],\n      oldQA: []\n    };\n  }\n\n  componentDidMount() {\n    this.refreshQA = setInterval(() => this.updateList(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.refreshQA);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.state.qbutton.map(button => {\n        return /*#__PURE__*/_jsxDEV(QuestionPingButton, {\n          text: button.qButtonText,\n          onClick: this.showQuestions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this);\n      }), this.state.rows.map((row, idx) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: this.state.qbutton[0].showQuestionsFlag && /*#__PURE__*/_jsxDEV(Row, {\n            question: row.question,\n            answer: row.answer,\n            onClick: () => this.showAnswer(idx),\n            showAnswerFlag: row.showAnswerFlag\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 26\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 17\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"QuestionPingButton\");\n$RefreshReg$(_c2, \"Row\");","map":{"version":3,"sources":["/home/memo/catkin_ws/src/Robotic-Docent/robot-docent-mobile/src/questionare.js"],"names":["axios","React","QuestionPingButton","props","text","onClick","Row","question","answer","showAnswerFlag","QAGenerator","Component","constructor","addRow","Q","A","rows","state","setState","clearRows","updateList","newQA","get","oldQA","QAs","JSON","parse","QAList","forEach","QA","showAnswer","idx","showQuestions","qbutton","showQuestionsFlag","qButtonText","row","componentDidMount","refreshQA","setInterval","componentWillUnmount","clearInterval","render","map","button"],"mappings":"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","sourcesContent":["import './App.css';\nimport axios from 'axios';\nimport React from 'react';\n\nconst QuestionPingButton = function(props){\n    const {text, onClick} = props;\n    return(\n        <div>\n            <button onClick={onClick}>{text}</button>\n        </div>\n    );\n}\nconst Row = function(props){\n    const {question, answer, onClick, showAnswerFlag} = props;\n    return (\n      <div>\n        <button onClick={onClick}>{question}</button>\n        {showAnswerFlag && (\n            <box>{answer}</box>\n        )}\n      </div>\n    );\n  }\n  \nexport default class QAGenerator extends React.Component {\n    constructor(props){\n      super(props);\n      this.state = {\n        qbutton: [\n            {showQuestionsFlag: false, qButtonText: '\"I Have A Question!\"'}\n        ],\n        rows: [\n          {question: '\"Question 1\"', answer: 'Answer 1', showAnswerFlag: false},\n          {question: '\"Question 2\"', answer: 'Answer 2', showAnswerFlag: false},\n          {question: '\"Question 3\"', answer: 'Answer 3', showAnswerFlag: false}\n        ],\n        oldQA: []  \n      };\n\n    }\n    componentDidMount() {\n      this.refreshQA = setInterval(\n        () => this.updateList(),\n        1000\n      );\n    }\n    componentWillUnmount() {\n      clearInterval(this.refreshQA);\n    }\n\n    addRow = (Q, A) => {\n      const rows = [...this.state.rows, \n                    {question: Q, answer: A, showAnswerFlag: false}\n                   ];\n      this.setState({\n          rows: rows\n      });\n    }\n    \n    clearRows = () => {\n      this.setState({\n        rows: []\n      });\n    }\n\n    updateList = async () => {\n      const newQA = await axios.get(`http://127.0.0.1:5000/server/qa`); \n      if(newQA != this.state.oldQA){\n        const QAs = JSON.parse(newQA);\n\n        this.clearRows();\n        QAs.QAList.forEach(QA => {\n          this.addRow(QA.question, QA.answer)\n        });\n        this.setState({\n          oldQA: newQA\n        });\n      }\n    }\n    \n    showAnswer = (idx) => {\n      const rows = [...this.state.rows];\n      rows[idx].showAnswerFlag = !rows[idx].showAnswerFlag;\n      this.setState({\n          rows: rows\n      });\n    }\n    showQuestions = () => {\n        const qbutton = [...this.state.qbutton];\n        const rows = [...this.state.rows];\n        qbutton[0].showQuestionsFlag = !qbutton[0].showQuestionsFlag;\n        if(!qbutton[0].showQuestionsFlag){\n            qbutton[0].qButtonText = '\"I Have A Question!\"';\n            rows.forEach(row => {\n                row.showAnswerFlag = false\n            });\n        }\n        else{\n            qbutton[0].qButtonText = '\"Thank You!\"';\n        } \n        this.setState({\n            qbutton: qbutton\n        });\n    }\n    \n    render(){\n      return(\n        <div>\n            {this.state.qbutton.map((button) => {\n                return(\n                    <QuestionPingButton\n                            text={button.qButtonText}\n                            onClick={this.showQuestions}\n                    />\n                )\n                })\n            }\n          {this.state.rows.map((row, idx) => {\n            return(\n                <div>\n                    {this.state.qbutton[0].showQuestionsFlag && \n                        (<Row \n                        key={idx} \n                        question={row.question}\n                        answer={row.answer}\n                        onClick={() => this.showAnswer(idx)}\n                        showAnswerFlag={row.showAnswerFlag}\n                    />)} \n                </div>\n              )\n          })\n          }\n        </div>\n      );\n    }\n  }\n"]},"metadata":{},"sourceType":"module"}