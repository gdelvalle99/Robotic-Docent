{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\malig\\\\Documents\\\\GitHub\\\\Robotic-Docent\\\\robot-docent-mobile\\\\src\\\\questionare.js\";\nimport './App.css';\nimport axios from 'axios';\nimport React from 'react';\nimport _ from \"lodash\";\nimport styled from 'styled-components';\n/*\r\n\r\n*/\n//styles the button ui elements to look nice\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Button = styled.button` \n  background-color: #5d001e;\n  color: white;\n  font-size: 20px;\n  padding: 10px 90px;\n  border-radius: 5px;\n  margin: 10px 0px;\n  cursor: pointer;\n`;\n_c = Button;\nconst MButton = styled.button` \n  background-color: midnightblue;\n  color: white;\n  font-size: 20px;\n  padding: 10px 20px;\n  border-radius: 5px;\n  margin: 10px 0px;\n  cursor: pointer;\n`;\n_c2 = MButton;\nconst QButton = styled.button` \n  background-color: #9a1750;\n  color: white;\n  font-size: 20px;\n  width: 240px;\n  min-height: 50px;\n  border-radius: 5px;\n  margin: 10px 0px;\n  cursor: pointer;\n`; //Button that controls the dispay of the current questions/answer for the tour\n\n_c3 = QButton;\n\nconst QuestionPingButton = function (props) {\n  const {\n    text,\n    onClick,\n    displayFlag\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: displayFlag && /*#__PURE__*/_jsxDEV(Button, {\n      onClick: onClick,\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n}; //behavior for question buttons\n//on click, textbox pops up with answet text\n\n\n_c4 = QuestionPingButton;\n\nconst Row = function (props) {\n  const {\n    question,\n    answer,\n    onClick,\n    showAnswerFlag\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(QButton, {\n      onClick: onClick,\n      children: question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this), showAnswerFlag && /*#__PURE__*/_jsxDEV(\"box\", {\n      children: answer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 7\n  }, this);\n};\n\n_c5 = Row;\n\nconst MRow = function (props) {\n  const {\n    question,\n    answer,\n    onClick,\n    showAnswerFlag\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(MButton, {\n      onClick: onClick,\n      children: question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this), showAnswerFlag && /*#__PURE__*/_jsxDEV(\"mbox\", {\n      children: answer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 7\n  }, this);\n};\n\n_c6 = MRow;\nexport default class QAGenerator extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.addRow = (Q, A) => {\n      const rows = [...this.state.rows, {\n        question: Q,\n        answer: A,\n        showAnswerFlag: false\n      }];\n      this.setState({\n        rows: rows\n      });\n    };\n\n    this.clearRows = () => {\n      this.setState({\n        rows: []\n      });\n    };\n\n    this.updateList = async () => {\n      var newQA = await axios.get(`http://f6e4aa479723.ngrok.io/server/qa`). //robot server\n      catch(newQA => newQA);\n      const robot_not_found = newQA instanceof Error; //error only occurs when robot server not found\n\n      if (!robot_not_found && !_.isEqual(newQA.data, this.state.oldQA)) {\n        //checks that new QA data was pulled from robot server\n        var QAs = newQA.data;\n        this.clearRows(); //clear old data\n\n        QAs.QAList.forEach(QA => {\n          this.addRow(QA.question, QA.answer); //populate screen with new QA\n        });\n        this.setState({\n          oldQA: newQA.data\n        });\n      }\n    };\n\n    this.showAnswer = idx => {\n      const rows = [...this.state.rows];\n      rows[idx].showAnswerFlag = !rows[idx].showAnswerFlag;\n      const data = {\n        Q: rows[idx].question,\n        A: rows[idx].answer\n      };\n\n      if (rows[idx].showAnswerFlag) {\n        const text2speech = axios.post(`http://f6e4aa479723.ngrok.io/send_answer`, data);\n      }\n\n      this.setState({\n        rows: rows\n      });\n    };\n\n    this.showQuestions = () => {\n      const qbutton = [...this.state.qbutton];\n      const rows = [...this.state.rows];\n      qbutton[0].showQuestionsFlag = !qbutton[0].showQuestionsFlag;\n\n      if (!qbutton[0].showQuestionsFlag) {\n        qbutton[0].qButtonText = '\"I Have A Question!\"';\n        rows.forEach(row => {\n          row.showAnswerFlag = false;\n        });\n      } else {\n        qbutton[0].qButtonText = '\"Thank You!\"';\n      }\n\n      this.setState({\n        qbutton: qbutton\n      });\n    };\n\n    this.displayMap = async () => {\n      const mapbutton = [...this.state.mapbutton];\n      var museum_map = await axios.get(`http://127.0.0.1:5001/server/qa`). //robot server\n      catch(museum_map => museum_map);\n      const robot_not_found = museum_map instanceof Error; //error only occurs when robot server not found\n\n      if (robot_not_found) {\n        mapbutton[0].answer = /*#__PURE__*/React.createElement(\"img\", {\n          src: \"require('../src/map_not_found.png')\",\n          width: \"300px\",\n          height: \"300px\"\n        });\n      } else {\n        mapbutton[0].answer = /*#__PURE__*/React.createElement(\"img\", {\n          src: museum_map.src\n        });\n      }\n\n      mapbutton[0].showAnswerFlag = !mapbutton[0].showAnswerFlag;\n      this.setState({\n        oldMap: museum_map,\n        mapbutton: mapbutton\n      });\n    };\n\n    this.state = {\n      qbutton: [{\n        showQuestionsFlag: false,\n        qButtonText: '\"I Have A Question!\"',\n        displayFlag: true\n      }],\n      mapbutton: [{\n        question: 'Map',\n        answer: null,\n        showAnswerFlag: false\n      }],\n      rows: [//default (bunk) questions\n      {\n        question: '\"Question 1 is very long to test for the box resizing and seeing how it looks compared to everything else\"',\n        answer: 'Answer 1 is a very long answer that will be used to test whether it is getting the right answer or not so lets see what happens with this and see if it will go beyond the box Answer 1 is a very long answer that will be used to test whether it is getting the right answer or not so lets see what happens with this and see if it will go beyond the box Answer 1 is a very long answer that will be used to test whether it is getting the right answer or not so lets see what happens with this and see if it will go beyond the box',\n        showAnswerFlag: false\n      }, {\n        question: '\"Question 2\"',\n        answer: 'Answer 2',\n        showAnswerFlag: false\n      }, {\n        question: '\"Question 3\"',\n        answer: 'Answer 3',\n        showAnswerFlag: false\n      }],\n      oldQA: [],\n      //flag for updating question boxes \n      oldMap: null\n    };\n  }\n\n  componentDidMount() {\n    this.refreshQA = setInterval( //pings robot every second\n    () => this.updateList(), 5000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.refreshQA); //stops pinging robot on death\n  } //behavior for adding new question and answer boxes\n\n\n  //handles real-time rendering of new QA\n  //handles proper placement of UI elements\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 11\n      }, this), this.state.qbutton.map(button => {\n        return /*#__PURE__*/_jsxDEV(QuestionPingButton, {\n          text: button.qButtonText,\n          onClick: this.showQuestions,\n          displayFlag: button.displayFlag\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 21\n        }, this);\n      }), this.state.rows.map((row, idx) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: this.state.qbutton[0].showQuestionsFlag && /*#__PURE__*/_jsxDEV(Row, {\n            question: row.question,\n            answer: row.answer,\n            onClick: () => this.showAnswer(idx),\n            showAnswerFlag: row.showAnswerFlag\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 26\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 17\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }, this), this.state.mapbutton.map((row, idx) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(MRow, {\n            question: row.question,\n            answer: row.answer,\n            onClick: () => this.displayMap(idx),\n            showAnswerFlag: row.showAnswerFlag\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 17\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c2, \"MButton\");\n$RefreshReg$(_c3, \"QButton\");\n$RefreshReg$(_c4, \"QuestionPingButton\");\n$RefreshReg$(_c5, \"Row\");\n$RefreshReg$(_c6, \"MRow\");","map":{"version":3,"sources":["C:/Users/malig/Documents/GitHub/Robotic-Docent/robot-docent-mobile/src/questionare.js"],"names":["axios","React","_","styled","Button","button","MButton","QButton","QuestionPingButton","props","text","onClick","displayFlag","Row","question","answer","showAnswerFlag","MRow","QAGenerator","Component","constructor","addRow","Q","A","rows","state","setState","clearRows","updateList","newQA","get","catch","robot_not_found","Error","isEqual","data","oldQA","QAs","QAList","forEach","QA","showAnswer","idx","text2speech","post","showQuestions","qbutton","showQuestionsFlag","qButtonText","row","displayMap","mapbutton","museum_map","createElement","src","width","height","oldMap","componentDidMount","refreshQA","setInterval","componentWillUnmount","clearInterval","render","map"],"mappings":"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","sourcesContent":["import './App.css';\r\nimport axios from 'axios';\r\nimport React from 'react';\r\nimport _ from \"lodash\";\r\nimport styled from 'styled-components';\r\n/*\r\n\r\n*/\r\n\r\n//styles the button ui elements to look nice\r\nconst Button = styled.button` \r\n  background-color: #5d001e;\r\n  color: white;\r\n  font-size: 20px;\r\n  padding: 10px 90px;\r\n  border-radius: 5px;\r\n  margin: 10px 0px;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst MButton = styled.button` \r\n  background-color: midnightblue;\r\n  color: white;\r\n  font-size: 20px;\r\n  padding: 10px 20px;\r\n  border-radius: 5px;\r\n  margin: 10px 0px;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst QButton = styled.button` \r\n  background-color: #9a1750;\r\n  color: white;\r\n  font-size: 20px;\r\n  width: 240px;\r\n  min-height: 50px;\r\n  border-radius: 5px;\r\n  margin: 10px 0px;\r\n  cursor: pointer;\r\n`;\r\n\r\n//Button that controls the dispay of the current questions/answer for the tour\r\nconst QuestionPingButton = function(props){\r\n    const {text, onClick, displayFlag} = props;\r\n    return(\r\n        <div>\r\n          {displayFlag &&\r\n            <Button onClick={onClick}>{text}</Button>\r\n          }\r\n        </div>\r\n    );\r\n}\r\n\r\n//behavior for question buttons\r\n//on click, textbox pops up with answet text\r\nconst Row = function(props){\r\n    const {question, answer, onClick, showAnswerFlag} = props;\r\n    return (\r\n      <div>\r\n        <QButton onClick={onClick}>{question}</QButton>\r\n        <br></br>\r\n        {showAnswerFlag && (\r\n            <box>{answer}</box>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\nconst MRow = function(props){\r\n    const {question, answer, onClick, showAnswerFlag} = props;\r\n    return (\r\n      <div>\r\n        <MButton onClick={onClick}>{question}</MButton>\r\n        <br></br>\r\n        {showAnswerFlag && (\r\n            <mbox>{answer}</mbox>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n  \r\nexport default class QAGenerator extends React.Component {\r\n    constructor(props){\r\n      super(props);\r\n      this.state = {\r\n        qbutton: [\r\n            {showQuestionsFlag: false, qButtonText: '\"I Have A Question!\"', displayFlag: true}\r\n        ],\r\n        mapbutton: [\r\n          {question: 'Map', answer: null, showAnswerFlag: false}\r\n        ],\r\n        rows: [//default (bunk) questions\r\n          {question: '\"Question 1 is very long to test for the box resizing and seeing how it looks compared to everything else\"', answer: 'Answer 1 is a very long answer that will be used to test whether it is getting the right answer or not so lets see what happens with this and see if it will go beyond the box Answer 1 is a very long answer that will be used to test whether it is getting the right answer or not so lets see what happens with this and see if it will go beyond the box Answer 1 is a very long answer that will be used to test whether it is getting the right answer or not so lets see what happens with this and see if it will go beyond the box', showAnswerFlag: false},\r\n          {question: '\"Question 2\"', answer: 'Answer 2', showAnswerFlag: false},\r\n          {question: '\"Question 3\"', answer: 'Answer 3', showAnswerFlag: false}\r\n        ],\r\n        oldQA: [], //flag for updating question boxes \r\n        oldMap: null\r\n      };\r\n\r\n    }\r\n    componentDidMount() {\r\n      this.refreshQA = setInterval( //pings robot every second\r\n        () => this.updateList(),\r\n        5000\r\n      );\r\n    }\r\n    componentWillUnmount() {\r\n      clearInterval(this.refreshQA); //stops pinging robot on death\r\n    }\r\n\r\n    //behavior for adding new question and answer boxes\r\n    addRow = (Q, A) => {\r\n      const rows = [...this.state.rows, \r\n                    {question: Q, answer: A, showAnswerFlag: false}\r\n                   ];\r\n      this.setState({\r\n          rows: rows\r\n      });\r\n    }\r\n    \r\n    //behavior to delete all QA boxes when updating list\r\n    clearRows = () => {\r\n      this.setState({\r\n        rows: []\r\n      });\r\n    }\r\n\r\n    updateList = async () => {\r\n      var newQA = await axios.get(`http://f6e4aa479723.ngrok.io/server/qa`). //robot server\r\n        catch( newQA => newQA);\r\n      const robot_not_found = newQA instanceof Error; //error only occurs when robot server not found\r\n      if(!robot_not_found && !_.isEqual(newQA.data, this.state.oldQA)){//checks that new QA data was pulled from robot server\r\n        var QAs = newQA.data;\r\n        this.clearRows(); //clear old data\r\n        QAs.QAList.forEach(QA => {\r\n          this.addRow(QA.question, QA.answer) //populate screen with new QA\r\n        });\r\n        this.setState({\r\n          oldQA: newQA.data\r\n        });\r\n      }\r\n    }\r\n    \r\n    //behavior for clicking on Question box\r\n    //should populatescreen with associated asnwer\r\n    //hides answer on second click\r\n    showAnswer = (idx) => {\r\n      const rows = [...this.state.rows];\r\n      rows[idx].showAnswerFlag = !rows[idx].showAnswerFlag;\r\n      const data = {Q: rows[idx].question, A: rows[idx].answer};\r\n      if(rows[idx].showAnswerFlag){\r\n        const text2speech = axios.post(`http://f6e4aa479723.ngrok.io/send_answer`, data);\r\n      }\r\n      \r\n      this.setState({\r\n          rows: rows\r\n      });\r\n    }\r\n    //behavior of the \"I Have A Question\" button\r\n    //on click, populates screen with questions and change text to \"Thank You!\"\r\n    //clicking \"Thank You!\" hides QA boxes and changes text back\r\n    showQuestions = () => {\r\n        const qbutton = [...this.state.qbutton];\r\n        const rows = [...this.state.rows];\r\n        qbutton[0].showQuestionsFlag = !qbutton[0].showQuestionsFlag;\r\n        if(!qbutton[0].showQuestionsFlag){\r\n            qbutton[0].qButtonText = '\"I Have A Question!\"';\r\n            rows.forEach(row => {\r\n                row.showAnswerFlag = false\r\n            });\r\n        }\r\n        else{\r\n            qbutton[0].qButtonText = '\"Thank You!\"';\r\n        } \r\n        this.setState({\r\n            qbutton: qbutton\r\n        });\r\n    }\r\n\r\n\r\n\r\n    displayMap = async () => {\r\n      const mapbutton = [...this.state.mapbutton];\r\n      var museum_map = await axios.get(`http://127.0.0.1:5001/server/qa`). //robot server\r\n        catch( museum_map => museum_map);\r\n      const robot_not_found = museum_map instanceof Error; //error only occurs when robot server not found\r\n      if(robot_not_found){\r\n        mapbutton[0].answer = React.createElement(\r\n          \"img\",\r\n          {\r\n            src: \"require('../src/map_not_found.png')\",\r\n            width: \"300px\",\r\n            height: \"300px\"\r\n          });\r\n      }\r\n      else{\r\n        mapbutton[0].answer = React.createElement(\r\n          \"img\",\r\n          {\r\n            src: museum_map.src,\r\n          });\r\n      }\r\n      mapbutton[0].showAnswerFlag = !mapbutton[0].showAnswerFlag;\r\n      this.setState({\r\n        oldMap: museum_map,\r\n        mapbutton: mapbutton\r\n\r\n      });\r\n    }\r\n    \r\n    //handles real-time rendering of new QA\r\n    //handles proper placement of UI elements\r\n    render(){\r\n      return(\r\n        <div>\r\n          <br></br>\r\n          <br></br>\r\n          <br></br>\r\n          <br></br>\r\n            {this.state.qbutton.map((button) => {\r\n                return(\r\n                    <QuestionPingButton\r\n                            text={button.qButtonText}\r\n                            onClick={this.showQuestions}\r\n                            displayFlag={button.displayFlag}\r\n                    />\r\n                )\r\n                })\r\n            }\r\n          {this.state.rows.map((row, idx) => {\r\n            return(\r\n                <div>\r\n                    {this.state.qbutton[0].showQuestionsFlag && \r\n                        (<Row \r\n                        key={idx} \r\n                        question={row.question}\r\n                        answer={row.answer}\r\n                        onClick={() => this.showAnswer(idx)}\r\n                        showAnswerFlag={row.showAnswerFlag}\r\n                    />)} \r\n                </div>\r\n              )\r\n          })\r\n          }\r\n          <br></br>\r\n          <br></br>\r\n          <br></br>\r\n          {this.state.mapbutton.map((row, idx) => {\r\n            return(\r\n                <div>\r\n                    {(<MRow \r\n                        key={idx} \r\n                        question={row.question}\r\n                        answer={row.answer}\r\n                        onClick={() => this.displayMap(idx)}\r\n                        showAnswerFlag={row.showAnswerFlag}\r\n                    />)} \r\n                </div>\r\n                )\r\n              })\r\n            }\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n"]},"metadata":{},"sourceType":"module"}